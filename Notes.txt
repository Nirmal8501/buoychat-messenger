create project with vite

shadcn for component library --> install it  
                    npm install -D tailwindcss postcss autoprefixer
                    >>
                    >> npx tailwindcss init -p


for server, we created a folder server then ran npm init --yes, this creates a basic package.json

npm i express dotenv bcrypt jsonwebtoken cookie-parser cors mongoose

add a type:"module" to server's ppackage.json and install nodemon as a dev dependency

now made a .env file


//////////////////// SERVER //////////////////////

Explanation of const app = express();
Creates an Express Application:

express() is a function provided by the Express.js framework. When you call it, it creates an instance of an Express application, which is essentially an object that represents your web server.
Encapsulates Application Configuration:

The app instance serves as the main entry point for configuring and setting up routes, middleware, and other application-wide settings in your server.
This app object allows you to define routes (URLs) and responses, set up middleware, listen for incoming HTTP requests, handle errors, and more.
Makes the Server Ready to Handle Requests:

The app instance has methods (like .get(), .post(), .use(), and .listen()) that you use to define how your server responds to different HTTP requests (e.g., GET, POST) and how it processes requests through middleware.
Once you set up all the routes and middleware, you can call app.listen(port, callback) to start the server and listen on a specified port.



///////////////// DB //////////////////////////

2. Hashing the Password
const salt = await genSalt();:

genSalt() is a function (usually from the bcrypt library) that generates a salt. A salt is a random value added to the password before hashing to ensure that even if two users have the same password, their hashed passwords will be different.
The await keyword indicates that this function returns a promise, and the code will wait for the salt to be generated before moving on to the next line.


middlewares should always call next() after their operation is performed


1) mongoose.Schema
Definition: The mongoose.Schema constructor is used to create a schema for a MongoDB collection. A schema defines the structure of the documents within that collection, including field names, data types, and validation requirements.

Usage: You define a schema by creating an instance of mongoose.Schema, passing an object that describes the fields and their types.


2)userSchema.pre
Definition: The pre method is used to define middleware that runs before a certain action is taken on the schema, such as saving a document or validating. The middleware can perform actions like data transformation, validation, or even logging.

Usage: You call userSchema.pre with the name of the operation (e.g., "save", "validate") and a function that describes what should happen before that operation.




axios.create() is a method provided by the Axios library in JavaScript. It allows you to create an instance of Axios with custom configuration, such as base URLs, headers, and timeouts. This is useful when you want to set up an Axios instance with specific defaults, which can then be used throughout your app without reconfiguring each request.


